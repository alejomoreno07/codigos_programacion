#include <bits/stdc++.h>
using namespace std;

int n,m,x,y;
vector<int> g[1100];

void clear(){
	for(int i=0;i<1100;i++) g[i].clear();
}

const int MP=10001;
int visited[MP];
int prev[MP],low[MP],d[MP];
vector< pair<int,int> > bridges;
int t,ticks;

void dfs(int u){
	visited[u]=true;
	d[u]=low[u]=ticks++;
	for(int i=0;i<g[u].size();i++){
		int v=g[u][i];
		if(prev[u]!=v){
			if(!visited[v]){
				prev[v]=u;
				dfs(v);
				if(d[u]<low[v]){
					bridges.push_back(make_pair(min(u,v),max(u,v)));
				}
				low[u]= min(low[u],low[v]);
			}
			else{
				low[u]= min(low[u],d[v]);
			}	
		}
	}
}

void solver(){
	ticks=0;
	for(int i=0;i<n;++i){
		if(!visited[i]){
			dfs(i);
		}
	}
	sort(bridges.begin(),bridges.end());
	cout<<bridges.size();
	for(int i=0;i<bridges.size();i++){
		cout<<" "<<bridges[i].first<<" "<<bridges[i].second;
	}
	cout<<endl;
}

void start(){
	clear();
	memset(visited,false,sizeof(visited));
	memset(prev,-1,sizeof(prev));
	bridges.clear();

	for(int i=0;i<m;i++){
		cin>>x>>y;
		g[x].push_back(y);
		g[y].push_back(x);
	}
	solver();
}

int main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	while(cin>>n>>m){
		if(n==0 && m==0) return 0;
		start();
	}
	return 0;
}
